// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}


model User {
  id             Int             @id @default(autoincrement())
  email          String          @unique
  password       String
  name           String?
  phoneNumber    String
  secondPhoneNumber String?      // Additional phone number (optional)
  isActive       Boolean         @default(false)  // To track if the user has activated their account
  location       String?
  roles          UserRole[]      @relation("UserRoles")
  orders         Order[]
  restaurant     Restaurant?     @relation("RestaurantUsers", fields: [restaurantId], references: [id])
  restaurantId   Int?
  superAdminOf   Restaurant?     @relation("SuperAdminRelation")
  token          Token?          @relation("UserTokenRelation") // This is enough for the relation
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
}

model Token {
  id          Int       @id @default(autoincrement())
  token       String    @unique
  user        User      @relation("UserTokenRelation", fields: [userId], references: [id])
  userId      Int       @unique // Ensures a one-to-one relationship
  createdAt   DateTime  @default(now())
  expiresAt   DateTime  // Time when the token will expire
}


model Restaurant {
  id          Int        @id @default(autoincrement())
  name        String
  location     String
  logoUrl     String?    // To store the uploaded logo file
  superAdmin  User       @relation("SuperAdminRelation", fields: [superAdminId], references: [id]) // Modify this line
  superAdminId Int        @unique
  users       User[]     @relation("RestaurantUsers")
  orders      Order[]
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
}


model UserRole {
  id          Int        @id @default(autoincrement())
  name        String
  createdAt   DateTime   @default(now())
  permissions Permission[] @relation("RolePermissions")
  users       User[]     @relation("UserRoles")
}

model Permission {
  id          Int        @id @default(autoincrement())
  name        String
  roles       UserRole[] @relation("RolePermissions")
}

model Pizza {
  id          Int        @id @default(autoincrement())
  name        String     // Pizza name
  toppings    Topping[]  @relation("PizzaToppings") // Many-to-many relationship with Topping
  price       Float      // Price for the pizza
  pizza_photo       String?    // Optional: URL or path to pizza photo
  orderPizzas OrderPizza[] @relation("PizzaOrderPizzas") // One-to-many relationship with OrderPizza
}

model Topping {
  id       Int     @id @default(autoincrement())
  name     String
  pizzas   Pizza[] @relation("PizzaToppings") // Many-to-many relationship with Pizza
  orderPizzas OrderPizza[] @relation("OrderPizzaToppings") // Many-to-many relationship with OrderPizza
}
model Order {
  id            Int        @id @default(autoincrement())
  status        OrderStatus
  customer      User       @relation(fields: [customerId], references: [id])
  customerId    Int
  restaurant    Restaurant? @relation(fields: [restaurantId], references: [id])
  restaurantId  Int?
  pizzas        OrderPizza[] 
  quantity   Int
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
}

model OrderPizza {
  id        Int      @id @default(autoincrement())
  pizza     Pizza    @relation("PizzaOrderPizzas", fields: [pizzaId], references: [id]) // Foreign key to Pizza
  pizzaId   Int      // This is the foreign key field in OrderPizza
  toppings  Topping[] @relation("OrderPizzaToppings") // Many-to-many relationship with Topping
  order     Order    @relation(fields: [orderId], references: [id])
  orderId   Int
}

enum OrderStatus {
  Prepairing
  Ready
  Delivered
  
}












